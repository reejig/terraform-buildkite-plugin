#!/bin/bash

set -euo pipefail

##############################
## SETUP                    ##
##############################

# These folders are required if no config_dir is passed
required_folders=(
  terraform
)

# Check we have a directory to perform on
BUILDKITE_PLUGIN_TERRAFORM_DIRECTORY=${BUILDKITE_PLUGIN_TERRAFORM_DIRECTORY:-terraform}
FOUND_FOLDER=0
if [[ -n "${BUILDKITE_PLUGIN_TERRAFORM_DIRECTORY}" ]]; then
  if [[ -d "${BUILDKITE_PLUGIN_TERRAFORM_DIRECTORY}" ]]; then
    echo "${BUILDKITE_PLUGIN_TERRAFORM_DIRECTORY} directory located."
    FOUND_FOLDER=1
  else
    echo "${dir} directory not found. Please make sure it is located in the project root. We looked in $(pwd)."
  fi
else
  for dir in "${required_folders[@]}"; do
    if [[ -d $dir ]]; then
      echo "${dir} directory located."
      FOUND_FOLDER=1
    fi

    if [[ ${FOUND_FOLDER} -eq 0 ]]; then
      echo "${dir} directory not found. Please make sure it is located in the project root. We looked in $(pwd)."
      exit 1
    fi
  done
fi

# We do this to cover cases where modules are stored in GitHub.
# Without this, the container hangs forever waiting for confirmation.
KNOWN_HOSTS_FILE=$(pwd)/known_hosts

if [[ ! -f "${KNOWN_HOSTS_FILE}" ]]; then
  ssh-keyscan github.com >> "${KNOWN_HOSTS_FILE}"
fi

# Reads either a value or a list from plugin config
function plugin_read_list() {
  prefix_read_list "BUILDKITE_PLUGIN_TERRAFORM_$1"
}

# Reads either a value or a list from the given env prefix
function prefix_read_list() {
  local prefix="$1"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i + 1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    echo "${!prefix}"
  fi
}

function terraform_bin() {
  local DOCKER_IMAGE="${IMAGE_NAME}:${VERSION}"

  docker_args=()

  # Initial args passed to Docker
  docker_args+=(
    "--rm"
    "-it"
    "--env" "SSH_AUTH_SOCK"
    "--volume" "$SSH_AUTH_SOCK:$SSH_AUTH_SOCK"
    "--volume" "$PWD:/svc"
    "--volume" "$KNOWN_HOSTS_FILE:/root/.ssh/known_hosts"
  )

  # Read extra Terraform envs args passed from the plugin config
  extra_envs=()
  while read -r line; do
    [[ -n "$line" ]] && extra_envs+=("$line")
  done <<< "$(plugin_read_list ENV)"

  # Add the Terraform envs to the Docker args
  for e in ${extra_envs[@]-}; do
    docker_args+=("--env" "$e")
  done

  # Read any extra volumes to attach to the Docker container from the plugin config
  extra_volumes=()
  while read -r line; do
    [[ -n "$line" ]] && extra_volumes+=("$line")
  done <<< "$(plugin_read_list VOLUMES)"

  # Add the Volume args to the Docker args
  for v in ${extra_volumes[@]-}; do
    docker_args+=("--volume" "$v")
  done

  docker_args+=(
    "--workdir" "/svc"
    "$DOCKER_IMAGE"
    "${@}"
  )

  if [[ "${DEBUG}" == true ]]; then
    echo "--- :terraform: :buildkite: :hammer_and_wrench: Debug on - show Docker command string."
    echo "docker run $(printf "%q " "${docker_args[@]}")"
  fi

  docker run $(printf "%q " "${docker_args[@]}")
}

function terraform_run() {
  local APPLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY:-false}
  local APPLY_MASTER=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_MASTER:-false}
  local APPLY_ONLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_ONLY:-false}
  local TERRAFORM_DIR=${BUILDKITE_PLUGIN_TERRAFORM_DIRECTORY:-terraform}
  local BUILDKITE_BRANCH=${BUILDKITE_BRANCH:-}
  local DEBUG=${BUILDKITE_PLUGIN_TERRAFORM_DEBUG:-false}
  local IMAGE_NAME=${BUILDKITE_PLUGIN_TERRAFORM_IMAGE:-"hashicorp/terraform"}
  local NO_VALIDATE=${BUILDKITE_PLUGIN_TERRAFORM_NO_VALIDATE:-false}
  local SKIP_APPLY_NO_DIFF=${BUILDKITE_PLUGIN_TERRAFORM_SKIP_APPLY_NO_DIFF:-false}
  local USE_WORKSPACES=${BUILDKITE_PLUGIN_TERRAFORM_USE_WORKSPACES:-false}
  local VARS_DIR=${BUILDKITE_PLUGIN_TERRAFORM_VARS_DIR:-}
  local VARS_FILE_NAME=${BUILDKITE_PLUGIN_TERRAFORM_VARS_FILE_NAME:-}
  local VERSION=${BUILDKITE_PLUGIN_TERRAFORM_VERSION:-1.0.0}
  local WORKSPACE=${BUILDKITE_PLUGIN_TERRAFORM_WORKSPACE:-default}
  local AUTO_CREATE_WORKSPACE=${BUILDKITE_PLUGIN_TERRAFORM_AUTO_CREATE_WORKSPACE:-true}
  local WORKSPACE_METADATA_KEY=${BUILDKITE_PLUGIN_TERRAFORM_WORKSPACE_METADATA_KEY:-}

  # Set arguments for terraform init.
  args=()
  while read -r line; do
    [[ -n "$line" ]] && args+=("$line")
  done <<< "$(plugin_read_list INIT_ARGS)"

  if [[ "${DEBUG}" == true ]]; then
    echo "--- :terraform: :buildkite: :hammer_and_wrench: Debug on - list local variables."
    echo "APPLY: ${APPLY}"
    echo "APPLY_MASTER: ${APPLY_MASTER}"
    echo "APPLY_ONLY: ${APPLY_ONLY}"
    echo "DIRECTORY: ${TERRAFORM_DIR}"
    echo "VARS_DIR: ${VARS_DIR}"
    echo "VARS_FILE_NAME: ${VARS_FILE_NAME}"
    echo "BUILDKITE_BRANCH: ${BUILDKITE_BRANCH}"
    echo "IMAGE_NAME: ${IMAGE_NAME}"
    # shellcheck disable=SC2145
    echo "INIT_ARGS: ${args[@]}"
    echo "NO_VALIDATE: ${NO_VALIDATE}"
    echo "SKIP_APPLY_NO_DIFF: ${SKIP_APPLY_NO_DIFF}"
    echo "USE_WORKSPACES: ${USE_WORKSPACES}"
    echo "VERSION: ${VERSION}"
    echo "WORKSPACE: ${WORKSPACE}"
    echo "AUTO_CREATE_WORKSPACE: ${AUTO_CREATE_WORKSPACE}"
    echo "WORKSPACE_METADATA_KEY ${WORKSPACE_METADATA_KEY}"
  fi

  cd "${TERRAFORM_DIR}"

  echo "+++ :terraform: :buildkite: :hammer_and_wrench: Setting up Terraform environment ..."
  if [[ "${DEBUG}" == true ]]; then
    # shellcheck disable=SC2145
    echo "Running init command string: terraform init ${args[@]}"
  fi

  terraform_bin init "${args[@]}"
  echo ""

  if [[ "${USE_WORKSPACES}" == true ]]; then
    if [[ -n ${WORKSPACE_METADATA_KEY} ]]; then
      WORKSPACE=$(buildkite-agent meta-data get "${WORKSPACE_METADATA_KEY}")
      echo "Overriding WORKSPACE with metadata key: ${WORKSPACE_METADATA_KEY}. Set WORKSPACE=${WORKSPACE}"
    fi
    if [[ "${AUTO_CREATE_WORKSPACE}" == true ]]; then
      terraform_bin workspace select "${WORKSPACE}" || terraform_bin workspace new "${WORKSPACE}"
    else
      terraform_bin workspace select "${WORKSPACE}"
    fi
    echo ""
  fi

  if [[ "${NO_VALIDATE}" == false ]]; then
    terraform_bin validate
  fi

  if [[ "${APPLY_ONLY}" == false ]]; then
    echo "+++ :terraform: :buildkite: :hourglass: Running Terraform plan..."

    if [[ "${USE_WORKSPACES}" == true ]]; then
      if [[ -n "${VARS_DIR}" ]]; then
        # Check to ensure the final slash is present or not
        local CLEAN_VARS_DIR=${VARS_DIR}
        if [[ "${VARS_DIR: -1}" != "/" ]]; then
          CLEAN_VARS_DIR="${VARS_DIR}/"
        fi

        if [[ -n "${VARS_FILE_NAME}" ]]; then
          terraform_bin plan -input=false -out tfplan -var-file="${CLEAN_VARS_DIR}${VARS_FILE_NAME}"
        else
          terraform_bin plan -input=false -out tfplan -var-file="${CLEAN_VARS_DIR}${WORKSPACE}-terraform.tfvars"
        fi
      else
        terraform_bin plan -input=false -out tfplan -var-file="${WORKSPACE}-terraform.tfvars"
      fi
    else
      if [[ -n "${VARS_FILE_NAME}" ]]; then
        if [[ -n "${VARS_DIR}" ]]; then
          # Check to ensure the final slash is present or not
          local CLEAN_VARS_DIR=${VARS_DIR:-}
          if [[ "${VARS_DIR: -1}" != "/" ]]; then
            CLEAN_VARS_DIR="${VARS_DIR}/"
          fi
          terraform_bin plan -input=false -out tfplan -var-file="${CLEAN_VARS_DIR}${VARS_FILE_NAME}"
        else
          terraform_bin plan -input=false -out tfplan -var-file="${VARS_FILE_NAME}"
        fi
      else
        terraform_bin plan -input=false -out tfplan
      fi
    fi

    # Capture plan output for setting variables and passing as artifacts.
    terraform_bin show tfplan -no-color > tfplan.txt
    terraform_bin show -json tfplan > tfplan.json

    if grep -iFq "Plan: 0 to add, 0 to change, 0 to destroy." tfplan.txt; then
      echo ""
      echo "--- :terraform: :buildkite: :white_check_mark: Exporting tf_diff=false to agent metadata."
      buildkite-agent meta-data set "tf_diff" "false"
      export TF_DIFF=false
    else
      echo ""
      echo "--- :terraform: :buildkite: :white_check_mark: Exporting tf_diff=true to agent metadata."
      buildkite-agent meta-data set "tf_diff" "true"
      export TF_DIFF=true
    fi

    echo "--- :terraform: :buildkite: :floppy_disk: Listing directory contents for record keeping."
    ls -al .
  else
    export TF_DIFF=true
  fi

  if [[ "${APPLY}" == true || "${APPLY_ONLY}" == true || ("${APPLY_MASTER}" == true && "${BUILDKITE_BRANCH}" == "master") ]]; then
    if [[ "${TF_DIFF}" == false && "${SKIP_APPLY_NO_DIFF}" == true ]]; then
      echo "--- :terraform: :buildkite: :zzz: Skipping apply step."
    else
      echo "+++ :terraform: :buildkite: :hourglass: Running Terraform apply based on calculated plan..."
      terraform_bin apply -input=false tfplan
    fi
  fi
}

terraform_run
